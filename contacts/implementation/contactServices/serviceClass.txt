package com.kuvira.contact.services;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.kuvira.contact.response.model.ContactDTO;
import com.kuvira.contacts.app.dao.exceptions.BadRequestException;
import com.kuvira.contacts.app.dao.exceptions.DeletionFailureException;
import com.kuvira.contacts.app.dao.service.interfaces.ContactService;
import com.kuvira.contacts.app.entities.Address;
import com.kuvira.contacts.app.entities.Contact;
import com.kuvira.contacts.services.exception.ServiceBadRequestException;
import com.kuvira.contacts.services.exception.ServiceDeletionFailureException;


@Path("/v1")
public class ContactsProviderService {
    
	private static final String EMPTY = "";
	//@Autowired(required=true)
	ContactService contactService = getContactService();
	
	
	
	@Path("/add")
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Response addContact(ContactDTO contacts){
		Contact contact = getConatctsMapping(contacts);
		contactService.addContact(contact);
		return Response.status(Status.CREATED).entity(contacts).build();
	}

	@Path("/readall")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAllConatcts(){
			return Response.status(Status.OK).entity(contactService.getAllContacts()).build();
	}
	
	
	@GET
	@Path("/read/{contact_name}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response getAllConatcts(@PathParam("contact_name") String contact_name){
	   return Response.status(Status.OK).entity(contactService.getContact(contact_name)).build();
	}
	
	
	@PUT
	@Path("/update/{contact_name}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public Response updateContact(ContactDTO contactDTO,@PathParam("contact_name") String conatctName){
		Response response = null;
		
		if((conatctName != null && !EMPTY.equals(conatctName.trim())) && conatctName.equals(contactDTO.getContact_name())){
		  contactService.updateContact(getConatctsMapping(contactDTO));
		  response = Response.status(Status.OK).entity(contactDTO).build();
		}else if((conatctName == null || EMPTY.equals(conatctName.trim())) || !conatctName.equals(contactDTO.getContact_name())){
			throw new ServiceBadRequestException("It is a bad request");
		}
		return response;
	}
	
	
	@DELETE
	@Path("/delete/{contact_name}")
	@Produces(MediaType.APPLICATION_JSON)
	public Response dleteConatct(@PathParam("contact_name") String contact_name){
			contactService.deleteContact(contact_name);
			return Response.status(Status.OK).entity(contact_name).build();
	}
	
	private Contact getConatctsMapping(ContactDTO contacts) {
		Contact contact = new Contact();
		contact.setContact_name(contacts.getContact_name());
		contact.setFirst_name(contacts.getFirst_name());
		contact.setLast_name(contacts.getLast_name());
		contact.setSur_name(contacts.getSur_name());
		contact.setMobile_number(contacts.getMobile_number());
		contact.setAddress(getAddress(contacts));
		contact.setEmail(contacts.getEmail());
		contact.setContact_num(contacts.getContact_num());
		return contact;
	}


	private Address getAddress(ContactDTO contacts) {
		Address address = new Address();
		address.setUnit(contacts.getAddress().getUnit());
		address.setArea(contacts.getAddress().getArea());
		address.setStreet(contacts.getAddress().getStreet());
		address.setState(contacts.getAddress().getStreet());
		address.setCountry(contacts.getAddress().getCountry());
		address.setPinCode(contacts.getAddress().getPincode());
		return address;
	}
	
	private ContactService getContactService() {
		ApplicationContext applicationContext = new ClassPathXmlApplicationContext("service-bean.xml");
		ContactService bean = (ContactService)applicationContext.getBean("contactService");
		return bean;
	}
}
